import os
import time
import pandas as pd
import google.generativeai as genai
from typing import List, Dict, Any
from pathlib import Path

class Config:
    DATA_DIR = Path('data')
    PROCESSED_DATA_DIR = DATA_DIR / 'processed'
    COMBINED_DATASET = PROCESSED_DATA_DIR / 'combined_prompts.csv'
    OUTPUT_DIR = Path('outputs')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', '')
    REQUEST_DELAY = 1.0  # seconds delay between API requests

class AIWhisperer:
    def __init__(self, config: Config):
        self.config = config
        if not self.config.GEMINI_API_KEY:
            raise ValueError('GEMINI_API_KEY environment variable is not set.')

        genai.configure(api_key=self.config.GEMINI_API_KEY)
        self.model = genai.GenerativeModel('gemini-2.5-flash')
        
        self.dataset = self.load_dataset()
        print("✅ AI Whisperer initialized as Prompt Optimizer")

    def load_dataset(self) -> pd.DataFrame:
        if self.config.COMBINED_DATASET.exists() and self.config.COMBINED_DATASET.stat().st_size > 0:
            df = pd.read_csv(self.config.COMBINED_DATASET)
            print(f"✅ Loaded {len(df)} prompt examples for reference")
            return df
        else:
            print("⚠️ No dataset found, using basic optimization only")
            return pd.DataFrame()

    def classify_intent(self, user_input: str) -> str:
        """Classify the type of request"""
        user_lower = user_input.lower()
        if any(keyword in user_lower for keyword in ['portfolio', 'photography', 'artist', 'gallery']):
            return 'portfolio'
        elif any(keyword in user_lower for keyword in ['blog', 'article', 'content', 'writing']):
            return 'content'
        elif any(keyword in user_lower for keyword in ['business', 'company', 'website', 'site']):
            return 'business'
        else:
            return 'general'

    def get_optimization_examples(self, intent: str) -> str:
        """Get relevant examples from dataset based on intent"""
        if self.dataset.empty:
            return ""
        
        # Filter examples by category if available
        relevant_examples = self.dataset.head(2)  # Just use first 2 examples to minimize tokens
        
        example_text = "\n\nHere are some example optimizations:\n"
        for _, row in relevant_examples.iterrows():
            example_text += f"Original: {row['user_input']}\n"
            example_text += f"Optimized: {row['optimized_prompt']}\n\n"
        
        return example_text

    def generate_optimized_prompt(self, user_input: str) -> str:
        """Generate a single, optimized prompt (main function)"""
        intent = self.classify_intent(user_input)
        examples = self.get_optimization_examples(intent)
        
        optimization_prompt = f"""
You are an expert AI prompt optimizer. Transform the user's basic request into a clear, detailed, and effective prompt that will get better results from AI systems.

Instructions:
1. Make the prompt more specific and actionable
2. Add relevant context and constraints
3. Specify the desired output format
4. Remove ambiguity
5. Keep it concise but comprehensive

User's original request: "{user_input}"
{examples}
Generate an optimized version of this prompt that will produce better, more focused AI responses:
"""

        try:
            response = self.model.generate_content(optimization_prompt)
            optimized = response.text.strip()
            
            # Clean up the response if it includes extra formatting
            if optimized.startswith('"') and optimized.endswith('"'):
                optimized = optimized[1:-1]
            
            return optimized
        except Exception as e:
            return f"Error generating optimized prompt: {str(e)}"

    def execute_prompt_chain(self, user_input: str) -> Dict[str, Any]:
        """Execute optimization (adapted to work with existing frontend)"""
        optimized_prompt = self.generate_optimized_prompt(user_input)
        
        return {
            'user_input': user_input,
            'intent': self.classify_intent(user_input),
            'steps': [{
                'step_number': 1,
                'description': 'Optimized Prompt',
                'prompt': f'Original: {user_input}',
                'output': optimized_prompt,
                'success': not optimized_prompt.startswith("Error")
            }]
        }

    def generate_final_report(self, results: Dict[str, Any]) -> str:
        """Generate a simple report with the optimized prompt"""
        step = results['steps'][0]
        report = f"""# AI Prompt Optimization

## Original Request
{results['user_input']}

## Optimized Prompt
{step['output']}

## How to Use
Copy the optimized prompt above and use it with any AI system (ChatGPT, Claude, Gemini, etc.) for better, more focused results.

---
*Generated by AI Whisperer Prompt Optimizer*
"""
        return report

    def save_report(self, report: str, filename: str = None) -> Path:
        self.config.OUTPUT_DIR.mkdir(exist_ok=True)
        if not filename:
            import time
            filename = f"optimized_prompt_{int(time.time())}.md"
        file_path = self.config.OUTPUT_DIR / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(report)
        return file_path

# Usage example:
if __name__ == "__main__":
    config = Config()
    optimizer = AIWhisperer(config)
    
    user_request = "Create a website for my bakery"
    optimized = optimizer.generate_optimized_prompt(user_request)
    
    print(f"Original: {user_request}")
    print(f"Optimized: {optimized}")
